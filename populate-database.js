const { connectDB, getDB } = require('./src/config/database');
const bcrypt = require('bcrypt');

async function populateDatabase() {
  try {
    console.log('üîÑ Conectando ao banco de dados...');
    await connectDB();
    const db = getDB();
    
    console.log('üóëÔ∏è Limpando dados existentes...');
    await db.collection('users').deleteMany({});
    await db.collection('lessons').deleteMany({});
    await db.collection('vocabulary').deleteMany({});
    await db.collection('user_progress').deleteMany({});
    
    console.log('üë• Criando usu√°rios de exemplo...');
    
    // Usu√°rios de exemplo
    const users = [
      {
        username: 'admin',
        email: 'admin@nihongo.com',
        password: await bcrypt.hash('admin123', 10),
        firstName: 'Admin',
        lastName: 'Sistema',
        level: 'advanced',
        createdAt: new Date(),
        lastLogin: new Date(),
        isActive: true,
        preferences: {
          studyTime: 60,
          notifications: true,
          language: 'pt-BR'
        }
      },
      {
        username: 'joao_silva',
        email: 'joao@email.com',
        password: await bcrypt.hash('senha123', 10),
        firstName: 'Jo√£o',
        lastName: 'Silva',
        level: 'beginner',
        createdAt: new Date(),
        lastLogin: null,
        isActive: true,
        preferences: {
          studyTime: 30,
          notifications: true,
          language: 'pt-BR'
        }
      },
      {
        username: 'maria_santos',
        email: 'maria@email.com',
        password: await bcrypt.hash('senha123', 10),
        firstName: 'Maria',
        lastName: 'Santos',
        level: 'intermediate',
        createdAt: new Date(),
        lastLogin: new Date(),
        isActive: true,
        preferences: {
          studyTime: 45,
          notifications: true,
          language: 'pt-BR'
        }
      }
    ];
    
    const userResult = await db.collection('users').insertMany(users);
    console.log(`‚úÖ ${userResult.insertedCount} usu√°rios criados`);
    
    console.log('üìö Criando li√ß√µes de exemplo...');
    
    // Li√ß√µes de exemplo
    const lessons = [
      {
        title: 'Introdu√ß√£o ao Hiragana',
        description: 'Aprenda os primeiros caracteres hiragana b√°sicos',
        level: 'beginner',
        category: 'hiragana',
        order: 1,
        content: [
          'Os hiraganas s√£o a base da escrita japonesa',
          'Come√ßaremos com as vogais: „ÅÇ, „ÅÑ, „ÅÜ, „Åà, „Åä',
          'Cada caractere representa um som espec√≠fico'
        ],
        exercises: [
          {
            type: 'multiple_choice',
            question: 'Qual √© o som do caractere „ÅÇ?',
            options: ['a', 'i', 'u', 'e', 'o'],
            correct: 0
          }
        ],
        duration: 30,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date(),
        prerequisites: [],
        tags: ['hiragana', 'b√°sico', 'vogais']
      },
      {
        title: 'Hiragana - Linha K',
        description: 'Aprenda os caracteres hiragana da linha K',
        level: 'beginner',
        category: 'hiragana',
        order: 2,
        content: [
          'A linha K: „Åã, „Åç, „Åè, „Åë, „Åì',
          'Estes caracteres s√£o formados adicionando tra√ßos ao hiragana base',
          'Pratique a escrita de cada caractere'
        ],
        exercises: [
          {
            type: 'writing',
            question: 'Escreva o caractere para o som "ka"',
            answer: '„Åã'
          }
        ],
        duration: 45,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date(),
        prerequisites: ['hiragana_vowels'],
        tags: ['hiragana', 'consoantes', 'linha_k']
      },
      {
        title: 'Introdu√ß√£o ao Katakana',
        description: 'Aprenda os caracteres katakana b√°sicos',
        level: 'beginner',
        category: 'katakana',
        order: 1,
        content: [
          'Os katakanas s√£o usados para palavras estrangeiras',
          'Come√ßaremos com as vogais: „Ç¢, „Ç§, „Ç¶, „Ç®, „Ç™',
          'T√™m formas mais angulares que o hiragana'
        ],
        exercises: [
          {
            type: 'matching',
            question: 'Relacione os katakanas com seus sons',
            pairs: [
              { katakana: '„Ç¢', sound: 'a' },
              { katakana: '„Ç§', sound: 'i' },
              { katakana: '„Ç¶', sound: 'u' }
            ]
          }
        ],
        duration: 40,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date(),
        prerequisites: ['hiragana_basic'],
        tags: ['katakana', 'b√°sico', 'vogais']
      },
      {
        title: 'Vocabul√°rio B√°sico - Cumprimentos',
        description: 'Aprenda cumprimentos essenciais em japon√™s',
        level: 'beginner',
        category: 'vocabulary',
        order: 1,
        content: [
          '„Åì„Çì„Å´„Å°„ÅØ (konnichiwa) - Ol√°',
          '„Åä„ÅØ„Çà„ÅÜ (ohayou) - Bom dia',
          '„Åì„Çì„Å∞„Çì„ÅØ (konbanwa) - Boa noite',
          '„ÅÇ„Çä„Åå„Å®„ÅÜ (arigatou) - Obrigado'
        ],
        exercises: [
          {
            type: 'translation',
            question: 'Como se diz "obrigado" em japon√™s?',
            answer: '„ÅÇ„Çä„Åå„Å®„ÅÜ'
          }
        ],
        duration: 25,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date(),
        prerequisites: ['hiragana_basic'],
        tags: ['vocabul√°rio', 'cumprimentos', 'b√°sico']
      }
    ];
    
    const lessonResult = await db.collection('lessons').insertMany(lessons);
    console.log(`‚úÖ ${lessonResult.insertedCount} li√ß√µes criadas`);
    
    console.log('üìñ Criando vocabul√°rio de exemplo...');
    
    // Vocabul√°rio de exemplo
    const vocabulary = [
      {
        japanese: '„Åì„Çì„Å´„Å°„ÅØ',
        romaji: 'konnichiwa',
        portuguese: 'Ol√°',
        category: 'cumprimentos',
        level: 'beginner',
        examples: [
          '„Åì„Çì„Å´„Å°„ÅØ„ÄÅÁî∞‰∏≠„Åï„Çì (Konnichiwa, Tanaka-san) - Ol√°, Sr. Tanaka'
        ],
        notes: 'Usado durante o dia',
        createdAt: new Date(),
        isActive: true
      },
      {
        japanese: '„ÅÇ„Çä„Åå„Å®„ÅÜ',
        romaji: 'arigatou',
        portuguese: 'Obrigado',
        category: 'cumprimentos',
        level: 'beginner',
        examples: [
          '„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô (Arigatou gozaimasu) - Obrigado (formal)'
        ],
        notes: 'Forma casual. Use „ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô para ser mais formal',
        createdAt: new Date(),
        isActive: true
      },
      {
        japanese: 'Ê∞¥',
        romaji: 'mizu',
        portuguese: '√Ågua',
        category: 'substantivos',
        level: 'beginner',
        examples: [
          'Ê∞¥„Çí„Åè„Å†„Åï„ÅÑ (Mizu o kudasai) - √Ågua, por favor'
        ],
        notes: 'Substantivo b√°sico e muito √∫til',
        createdAt: new Date(),
        isActive: true
      },
      {
        japanese: 'È£ü„Åπ„Çã',
        romaji: 'taberu',
        portuguese: 'Comer',
        category: 'verbos',
        level: 'beginner',
        examples: [
          '„ÅîÈ£Ø„ÇíÈ£ü„Åπ„Çã (Gohan o taberu) - Comer arroz'
        ],
        notes: 'Verbo do grupo 2 (ichidan)',
        createdAt: new Date(),
        isActive: true
      },
      {
        japanese: 'Â≠¶Ê†°',
        romaji: 'gakkou',
        portuguese: 'Escola',
        category: 'substantivos',
        level: 'intermediate',
        examples: [
          'Â≠¶Ê†°„Å´Ë°å„Åè (Gakkou ni iku) - Ir para a escola'
        ],
        notes: 'Palavra composta: Â≠¶ (gaku) + Ê†° (kou)',
        createdAt: new Date(),
        isActive: true
      }
    ];
    
    const vocabularyResult = await db.collection('vocabulary').insertMany(vocabulary);
    console.log(`‚úÖ ${vocabularyResult.insertedCount} palavras de vocabul√°rio criadas`);
    
    console.log('üìà Criando progresso de usu√°rios...');
    
    // Progresso de usu√°rios
    const userProgress = [
      {
        userId: userResult.insertedIds[0], // admin
        lessonId: lessonResult.insertedIds[0],
        status: 'completed',
        score: 95,
        completedAt: new Date(),
        timeSpent: 25, // minutos
        attempts: 1
      },
      {
        userId: userResult.insertedIds[1], // joao
        lessonId: lessonResult.insertedIds[0],
        status: 'in_progress',
        score: 0,
        completedAt: null,
        timeSpent: 15,
        attempts: 1
      },
      {
        userId: userResult.insertedIds[1], // joao
        lessonId: lessonResult.insertedIds[1],
        status: 'not_started',
        score: 0,
        completedAt: null,
        timeSpent: 0,
        attempts: 0
      },
      {
        userId: userResult.insertedIds[2], // maria
        lessonId: lessonResult.insertedIds[0],
        status: 'completed',
        score: 88,
        completedAt: new Date(),
        timeSpent: 30,
        attempts: 2
      },
      {
        userId: userResult.insertedIds[2], // maria
        lessonId: lessonResult.insertedIds[1],
        status: 'completed',
        score: 92,
        completedAt: new Date(),
        timeSpent: 40,
        attempts: 1
      }
    ];
    
    // Inserir progresso um por vez para evitar conflitos
    let progressCount = 0;
    for (const progress of userProgress) {
      try {
        await db.collection('user_progress').insertOne(progress);
        progressCount++;
      } catch (error) {
        console.log(`‚ö†Ô∏è Erro ao inserir progresso: ${error.message}`);
      }
    }
    console.log(`‚úÖ ${progressCount} registros de progresso criados`);
    
    console.log('\nüéâ Banco de dados populado com sucesso!');
    console.log('\nüìä Resumo:');
    console.log(`üë• Usu√°rios: ${userResult.insertedCount}`);
    console.log(`üìö Li√ß√µes: ${lessonResult.insertedCount}`);
    console.log(`üìñ Vocabul√°rio: ${vocabularyResult.insertedCount}`);
    console.log(`üìà Progresso: ${progressCount}`);
    
    console.log('\nüîë Credenciais de teste:');
    console.log('Admin: admin@nihongo.com / admin123');
    console.log('Usu√°rio: joao@email.com / senha123');
    console.log('Usu√°rio: maria@email.com / senha123');
    
  } catch (error) {
    console.error('‚ùå Erro ao popular banco de dados:', error);
  } finally {
    process.exit(0);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  populateDatabase();
}

module.exports = populateDatabase;
