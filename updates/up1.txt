app/

page.tsx

"use client"

import { useState } from "react"
import { Navigation } from "@/components/navigation"
import { JapaneseQuiz } from "@/components/japanese-quiz"
import { CharacterTables } from "@/components/character-tables"

export default function Home() {
  const [currentPage, setCurrentPage] = useState("quiz")

  return (
    <main className="min-h-screen bg-background">
      <Navigation currentPage={currentPage} onPageChange={setCurrentPage} />
      {currentPage === "quiz" && <JapaneseQuiz />}
      {currentPage === "tables" && <CharacterTables />}
    </main>
  )
}

###############

components/

Character-tables.tsx
"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"

const hiraganaData = [
  { char: "あ", romaji: "a" },
  { char: "い", romaji: "i" },
  { char: "う", romaji: "u" },
  { char: "え", romaji: "e" },
  { char: "お", romaji: "o" },
  { char: "か", romaji: "ka" },
  { char: "き", romaji: "ki" },
  { char: "く", romaji: "ku" },
  { char: "け", romaji: "ke" },
  { char: "こ", romaji: "ko" },
  { char: "が", romaji: "ga" },
  { char: "ぎ", romaji: "gi" },
  { char: "ぐ", romaji: "gu" },
  { char: "げ", romaji: "ge" },
  { char: "ご", romaji: "go" },
  { char: "さ", romaji: "sa" },
  { char: "し", romaji: "shi" },
  { char: "す", romaji: "su" },
  { char: "せ", romaji: "se" },
  { char: "そ", romaji: "so" },
  { char: "ざ", romaji: "za" },
  { char: "じ", romaji: "ji" },
  { char: "ず", romaji: "zu" },
  { char: "ぜ", romaji: "ze" },
  { char: "ぞ", romaji: "zo" },
  { char: "た", romaji: "ta" },
  { char: "ち", romaji: "chi" },
  { char: "つ", romaji: "tsu" },
  { char: "て", romaji: "te" },
  { char: "と", romaji: "to" },
  { char: "だ", romaji: "da" },
  { char: "ぢ", romaji: "ji" },
  { char: "づ", romaji: "zu" },
  { char: "で", romaji: "de" },
  { char: "ど", romaji: "do" },
  { char: "な", romaji: "na" },
  { char: "に", romaji: "ni" },
  { char: "ぬ", romaji: "nu" },
  { char: "ね", romaji: "ne" },
  { char: "の", romaji: "no" },
  { char: "は", romaji: "ha" },
  { char: "ひ", romaji: "hi" },
  { char: "ふ", romaji: "fu" },
  { char: "へ", romaji: "he" },
  { char: "ほ", romaji: "ho" },
  { char: "ば", romaji: "ba" },
  { char: "び", romaji: "bi" },
  { char: "ぶ", romaji: "bu" },
  { char: "べ", romaji: "be" },
  { char: "ぼ", romaji: "bo" },
  { char: "ぱ", romaji: "pa" },
  { char: "ぴ", romaji: "pi" },
  { char: "ぷ", romaji: "pu" },
  { char: "ぺ", romaji: "pe" },
  { char: "ぽ", romaji: "po" },
  { char: "ま", romaji: "ma" },
  { char: "み", romaji: "mi" },
  { char: "む", romaji: "mu" },
  { char: "め", romaji: "me" },
  { char: "も", romaji: "mo" },
  { char: "や", romaji: "ya" },
  { char: "", romaji: "" },
  { char: "ゆ", romaji: "yu" },
  { char: "", romaji: "" },
  { char: "よ", romaji: "yo" },
  { char: "ら", romaji: "ra" },
  { char: "り", romaji: "ri" },
  { char: "る", romaji: "ru" },
  { char: "れ", romaji: "re" },
  { char: "ろ", romaji: "ro" },
  { char: "わ", romaji: "wa" },
  { char: "", romaji: "" },
  { char: "", romaji: "" },
  { char: "", romaji: "" },
  { char: "を", romaji: "wo" },
  { char: "ん", romaji: "n" },
  { char: "", romaji: "" },
  { char: "", romaji: "" },
  { char: "", romaji: "" },
  { char: "", romaji: "" },
]

const katakanaData = [
  { char: "ア", romaji: "a" },
  { char: "イ", romaji: "i" },
  { char: "ウ", romaji: "u" },
  { char: "エ", romaji: "e" },
  { char: "オ", romaji: "o" },
  { char: "カ", romaji: "ka" },
  { char: "キ", romaji: "ki" },
  { char: "ク", romaji: "ku" },
  { char: "ケ", romaji: "ke" },
  { char: "コ", romaji: "ko" },
  { char: "ガ", romaji: "ga" },
  { char: "ギ", romaji: "gi" },
  { char: "グ", romaji: "gu" },
  { char: "ゲ", romaji: "ge" },
  { char: "ゴ", romaji: "go" },
  { char: "サ", romaji: "sa" },
  { char: "シ", romaji: "shi" },
  { char: "ス", romaji: "su" },
  { char: "セ", romaji: "se" },
  { char: "ソ", romaji: "so" },
  { char: "ザ", romaji: "za" },
  { char: "ジ", romaji: "ji" },
  { char: "ズ", romaji: "zu" },
  { char: "ゼ", romaji: "ze" },
  { char: "ゾ", romaji: "zo" },
  { char: "タ", romaji: "ta" },
  { char: "チ", romaji: "chi" },
  { char: "ツ", romaji: "tsu" },
  { char: "テ", romaji: "te" },
  { char: "ト", romaji: "to" },
  { char: "ダ", romaji: "da" },
  { char: "ヂ", romaji: "ji" },
  { char: "ヅ", romaji: "zu" },
  { char: "デ", romaji: "de" },
  { char: "ド", romaji: "do" },
  { char: "ナ", romaji: "na" },
  { char: "ニ", romaji: "ni" },
  { char: "ヌ", romaji: "nu" },
  { char: "ネ", romaji: "ne" },
  { char: "ノ", romaji: "no" },
  { char: "ハ", romaji: "ha" },
  { char: "ヒ", romaji: "hi" },
  { char: "フ", romaji: "fu" },
  { char: "ヘ", romaji: "he" },
  { char: "ホ", romaji: "ho" },
  { char: "バ", romaji: "ba" },
  { char: "ビ", romaji: "bi" },
  { char: "ブ", romaji: "bu" },
  { char: "ベ", romaji: "be" },
  { char: "ボ", romaji: "bo" },
  { char: "パ", romaji: "pa" },
  { char: "ピ", romaji: "pi" },
  { char: "プ", romaji: "pu" },
  { char: "ペ", romaji: "pe" },
  { char: "ポ", romaji: "po" },
  { char: "マ", romaji: "ma" },
  { char: "ミ", romaji: "mi" },
  { char: "ム", romaji: "mu" },
  { char: "メ", romaji: "me" },
  { char: "モ", romaji: "mo" },
  { char: "ヤ", romaji: "ya" },
  { char: "", romaji: "" },
  { char: "ユ", romaji: "yu" },
  { char: "", romaji: "" },
  { char: "ヨ", romaji: "yo" },
  { char: "ラ", romaji: "ra" },
  { char: "リ", romaji: "ri" },
  { char: "ル", romaji: "ru" },
  { char: "レ", romaji: "re" },
  { char: "ロ", romaji: "ro" },
  { char: "ワ", romaji: "wa" },
  { char: "", romaji: "" },
  { char: "", romaji: "" },
  { char: "", romaji: "" },
  { char: "ヲ", romaji: "wo" },
  { char: "ン", romaji: "n" },
  { char: "", romaji: "" },
  { char: "", romaji: "" },
  { char: "", romaji: "" },
  { char: "", romaji: "" },
]

export function CharacterTables() {
  const [activeTable, setActiveTable] = useState<"hiragana" | "katakana">("hiragana")

  const currentData = activeTable === "hiragana" ? hiraganaData : katakanaData

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center space-y-4">
        <h1 className="text-3xl font-bold text-foreground">Tabelas de Caracteres</h1>
        <div className="flex justify-center gap-2">
          <Button
            variant={activeTable === "hiragana" ? "default" : "outline"}
            onClick={() => setActiveTable("hiragana")}
          >
            Hiragana
          </Button>
          <Button
            variant={activeTable === "katakana" ? "default" : "outline"}
            onClick={() => setActiveTable("katakana")}
          >
            Katakana
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="text-center text-2xl">
            {activeTable === "hiragana" ? "ひらがな (Hiragana)" : "カタカナ (Katakana)"}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-5 gap-2">
            {currentData.map((item, index) => (
              <div
                key={index}
                className={`aspect-square border border-border rounded-lg flex flex-col items-center justify-center p-2 ${
                  item.char ? "bg-card hover:bg-accent/10 transition-colors" : "bg-transparent border-transparent"
                }`}
              >
                {item.char && (
                  <>
                    <div className="text-3xl font-bold text-foreground mb-1">{item.char}</div>
                    <div className="text-sm text-muted-foreground">{item.romaji}</div>
                  </>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <div className="text-center text-sm text-muted-foreground">
        <p>Clique em "Praticando" no menu para testar seus conhecimentos!</p>
      </div>
    </div>
  )
}

####################

navigation.tsx

"use client"
import { Button } from "@/components/ui/button"
import { BookOpen, Table } from "lucide-react"

interface NavigationProps {
  currentPage: string
  onPageChange: (page: string) => void
}

export function Navigation({ currentPage, onPageChange }: NavigationProps) {
  return (
    <nav className="bg-card border-b border-border p-4">
      <div className="max-w-4xl mx-auto flex items-center justify-between">
        <h1 className="text-2xl font-bold text-foreground">Japonês</h1>
        <div className="flex gap-2">
          <Button
            variant={currentPage === "quiz" ? "default" : "outline"}
            onClick={() => onPageChange("quiz")}
            className="flex items-center gap-2"
          >
            <BookOpen className="w-4 h-4" />
            Praticando
          </Button>
          <Button
            variant={currentPage === "tables" ? "default" : "outline"}
            onClick={() => onPageChange("tables")}
            className="flex items-center gap-2"
          >
            <Table className="w-4 h-4" />
            Tabelas
          </Button>
        </div>
      </div>
    </nav>
  )
}


